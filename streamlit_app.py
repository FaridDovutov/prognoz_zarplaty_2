import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import os

# --------------------------
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ó–∞–≥—Ä—É–∑–∫–∞ –î–∞–Ω–Ω—ã—Ö
# --------------------------

st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞—Ä–ø–ª–∞—Ç—ã (ML-Baseline)",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üí∞ –ú–æ–¥–µ–ª—å –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ó–∞—Ä–ø–ª–∞—Ç—ã")
st.subheader("–ë–∞–∑–æ–≤–∞—è (–õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è) –∏ –£–ª—É—á—à–µ–Ω–Ω–∞—è (–°–ª—É—á–∞–π–Ω—ã–π –õ–µ—Å) –ú–æ–¥–µ–ª–∏")

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã Streamlit
@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
    
    data_path = 'Salary_Data.csv'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º —á–∏—Ç–∞—Ç—å
        if not os.path.exists(data_path):
            raise FileNotFoundError(f"–§–∞–π–ª '{data_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
        data = pd.read_csv(data_path)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ Streamlit –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        st.error(f"–§–∞–π–ª '{data_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.")
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª 'Salary_Data.csv' –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ç–æ –∂–µ –º–µ—Å—Ç–æ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç 'streamlit_app.py'.")
        
        # –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        data = pd.DataFrame({
            'Age': [25, 28, 30, 32, 35, 38, 40, 42, 45, 50],
            'Gender': ['Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female'],
            'Education Level': ["Bachelor's", "Master's", "Bachelor's", "PhD", "Master's", "Bachelor's", "PhD", "Master's", "Bachelor's", "PhD"],
            'Job Title': ['Software Engineer', 'Data Scientist', 'Manager', 'Analyst', 'Software Engineer', 'Data Scientist', 'Manager', 'Analyst', 'Software Engineer', 'Data Scientist'],
            'Years of Experience': [1.5, 3.0, 5.0, 7.0, 10.0, 12.0, 15.0, 18.0, 20.0, 25.0],
            'Salary': [50000, 70000, 90000, 110000, 130000, 140000, 160000, 175000, 190000, 220000]
        })
        
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    data.dropna(inplace=True)
    return data

data = load_data()

# 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ 
numerical_features = ['Age', 'Years of Experience']
categorical_features = ['Gender', 'Education Level', 'Job Title']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore', sparse_output=False), categorical_features)
    ],
    remainder='drop'
)

# 3. –û–±—É—á–µ–Ω–∏–µ –ú–æ–¥–µ–ª–µ–π
@st.cache_resource
def train_models(data, preprocessor):
    """–û–±—É—á–∞–µ—Ç –æ–±–µ –º–æ–¥–µ–ª–∏ (–õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è –∏ –°–ª—É—á–∞–π–Ω—ã–π –õ–µ—Å)."""
    
    X = data.drop('Salary', axis=1)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é, –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 10 –¥–ª—è —Å–æ–º–æ–Ω–∏)
    y = data['Salary'] / 10 

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # --- 3.1. –õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è (Baseline) ---
    linear_pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                                      ('regressor', LinearRegression())])
    linear_pipeline.fit(X_train, y_train)
    y_pred_linear = linear_pipeline.predict(X_test)
    rmse_linear = np.sqrt(mean_squared_error(y_test, y_pred_linear))
    r2_linear = r2_score(y_test, y_pred_linear)
    
    # --- 3.2. –°–ª—É—á–∞–π–Ω—ã–π –õ–µ—Å ---
    rf_pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                                  ('regressor', RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1))])
    rf_pipeline.fit(X_train, y_train)
    y_pred_rf = rf_pipeline.predict(X_test)
    rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))
    r2_rf = r2_score(y_test, y_pred_rf)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ Streamlit
    results = pd.DataFrame({
        '–ú–æ–¥–µ–ª—å': ['–õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è (Baseline)', '–°–ª—É—á–∞–π–Ω—ã–π –õ–µ—Å (–£–ª—É—á—à–µ–Ω–Ω–∞—è)'],
        'R¬≤': [r2_linear, r2_rf],
        'RMSE': [rmse_linear, rmse_rf]
    })

    return linear_pipeline, rf_pipeline, results

linear_pipeline, rf_pipeline, results = train_models(data, preprocessor)

# --------------------------
# 4. –°–µ–∫—Ü–∏—è –ê–Ω–∞–ª–∏–∑–∞ –î–∞–Ω–Ω—ã—Ö
# --------------------------

st.header("üìä 1. –û–±–∑–æ—Ä –∏ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –î–∞–Ω–Ω—ã—Ö")

if st.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', value=True):
    st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–π –î–∞—Ç–∞—Å–µ—Ç")
    st.dataframe(data.head())
    st.subheader("–°–≤–æ–¥–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.dataframe(data.describe())

st.markdown("---")

st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
sns.set_style("whitegrid")

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
fig_hist, axes_hist = plt.subplots(1, 3, figsize=(18, 5))
sns.histplot(data['Age'], kde=True, ax=axes_hist[0])
axes_hist[0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–æ–∑—Ä–∞—Å—Ç–∞')
axes_hist[0].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç')

sns.histplot(data['Years of Experience'], kde=True, ax=axes_hist[1])
axes_hist[1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –°—Ç–∞–∂–∞ –†–∞–±–æ—Ç—ã')
axes_hist[1].set_xlabel('–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (–≥–æ–¥—ã)')

sns.histplot(data['Salary'], kde=True, ax=axes_hist[2])
axes_hist[2].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ó–∞—Ä–ø–ª–∞—Ç—ã')
axes_hist[2].set_xlabel('–ó–∞—Ä–ø–ª–∞—Ç–∞')

st.pyplot(fig_hist)


# –î–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ—è–Ω–∏—è
fig_scatter, axes_scatter = plt.subplots(1, 2, figsize=(16, 6))

sns.scatterplot(x='Years of Experience', y='Salary', data=data, hue='Education Level', size='Age', sizes=(20, 400), alpha=0.7, ax=axes_scatter[0])
axes_scatter[0].set_title('–ó–∞—Ä–ø–ª–∞—Ç–∞ vs. –°—Ç–∞–∂ –†–∞–±–æ—Ç—ã')
axes_scatter[0].set_xlabel('–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (–≥–æ–¥—ã)')
axes_scatter[0].set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞')

sns.scatterplot(x='Age', y='Salary', data=data, hue='Gender', size='Years of Experience', sizes=(20, 400), alpha=0.7, ax=axes_scatter[1])
axes_scatter[1].set_title('–ó–∞—Ä–ø–ª–∞—Ç–∞ vs. –í–æ–∑—Ä–∞—Å—Ç')
axes_scatter[1].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç')
axes_scatter[1].set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞')

st.pyplot(fig_scatter)


# –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
fig_cat, axes_cat = plt.subplots(1, 2, figsize=(16, 5))

sns.countplot(y='Education Level', data=data, order=data['Education Level'].value_counts().index, palette='viridis', ax=axes_cat[0])
axes_cat[0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –£—Ä–æ–≤–Ω—é –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')
axes_cat[0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

sns.countplot(x='Gender', data=data, palette='coolwarm', ax=axes_cat[1])
axes_cat[1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ü–æ–ª—É')
axes_cat[1].set_xlabel('–ü–æ–ª')

st.pyplot(fig_cat)

# Barplot –¥–ª—è Job Title
if data['Job Title'].nunique() < 30:
    fig_job, ax_job = plt.subplots(figsize=(10, 6))
    sns.barplot(y='Job Title', x='Salary', data=data.groupby('Job Title')['Salary'].mean().sort_values(ascending=False).reset_index(), palette='magma', ax=ax_job)
    ax_job.set_title('–°—Ä–µ–¥–Ω—è—è –ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –î–æ–ª–∂–Ω–æ—Å—Ç–∏')
    ax_job.set_xlabel('–°—Ä–µ–¥–Ω—è—è –ó–∞—Ä–ø–ª–∞—Ç–∞')
    ax_job.set_ylabel('–î–æ–ª–∂–Ω–æ—Å—Ç—å')
    st.pyplot(fig_job)
else:
    st.info(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ {data['Job Title'].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π. –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

# --------------------------
# 5. –°–µ–∫—Ü–∏—è –û—Ü–µ–Ω–∫–∏ –ú–æ–¥–µ–ª–∏
# --------------------------

st.header("‚öôÔ∏è 2. –û—Ü–µ–Ω–∫–∞ –ú–æ–¥–µ–ª–µ–π")

st.markdown("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ (–õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è) –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–°–ª—É—á–∞–π–Ω—ã–π –õ–µ—Å) –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—à–∏–±–∫–∏: **—Å–æ–º–æ–Ω”£**.")

col1, col2 = st.columns(2)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ DataFrame 'results', –∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
with col1:
    st.subheader("–õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è (Baseline)")
    st.metric(
        label="–ö–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏ (RMSE)",
        value=f"{results.loc[0, 'RMSE']:,.2f} —Å–æ–º–æ–Ω”£"
    )
    st.metric(
        label="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (R¬≤)",
        value=f"{results.loc[0, 'R¬≤']:.4f}"
    )

with col2:
    st.subheader("–°–ª—É—á–∞–π–Ω—ã–π –õ–µ—Å (–£–ª—É—á—à–µ–Ω–Ω–∞—è)")
    st.metric(
        label="–ö–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏ (RMSE)",
        value=f"{results.loc[1, 'RMSE']:,.2f} —Å–æ–º–æ–Ω”£"
    )
    st.metric(
        label="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (R¬≤)",
        value=f"{results.loc[1, 'R¬≤']:.4f}"
    )

st.dataframe(results, hide_index=True)


# --------------------------
# 6. –°–µ–∫—Ü–∏—è –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
# --------------------------

st.header("üîÆ 3. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞—Ä–ø–ª–∞—Ç—ã")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã.")

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
model_selection = st.selectbox(
    '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:',
    options=['–°–ª—É—á–∞–π–Ω—ã–π –õ–µ—Å (–£–ª—É—á—à–µ–Ω–Ω–∞—è)', '–õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è (Baseline)'],
    index=0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é
)

if model_selection == '–õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è (Baseline)':
    model = linear_pipeline
    st.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è **–õ–∏–Ω–µ–π–Ω–∞—è –†–µ–≥—Ä–µ—Å—Å–∏—è**.")
else:
    model = rf_pipeline
    st.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è **–°–ª—É—á–∞–π–Ω—ã–π –õ–µ—Å**.")


# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
input_cols = st.columns(3)

with input_cols[0]:
    age = st.slider("–í–æ–∑—Ä–∞—Å—Ç (Age)", min_value=int(data['Age'].min()), max_value=int(data['Age'].max()), value=35, step=1)
    gender = st.selectbox("–ü–æ–ª (Gender)", options=data['Gender'].unique())

with input_cols[1]:
    experience = st.slider("–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (Years of Experience)", min_value=0.0, max_value=float(data['Years of Experience'].max()), value=7.0, step=0.5)
    education = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (Education Level)", options=data['Education Level'].unique())

with input_cols[2]:
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ Job Title –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    job_options = sorted(data['Job Title'].unique())
    job_title = st.selectbox("–î–æ–ª–∂–Ω–æ—Å—Ç—å (Job Title)", options=job_options)


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ DataFrame
input_data = pd.DataFrame({
    'Age': [age],
    'Gender': [gender],
    'Education Level': [education],
    'Job Title': [job_title],
    'Years of Experience': [experience]
})

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.button('–°–¥–µ–ª–∞—Ç—å –ü—Ä–æ–≥–Ω–æ–∑ –ó–∞—Ä–ø–ª–∞—Ç—ã', type="primary"):
    try:
        # –ü—Ä–æ–≥–Ω–æ–∑
        predicted_salary = model.predict(input_data)[0]
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.success(f"**–ü—Ä–æ–≥–Ω–æ–∑ –ó–∞—Ä–ø–ª–∞—Ç—ã:**")
        st.balloons()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        st.markdown(f"## {predicted_salary:,.2f} —Å–æ–º–æ–Ω”£")
        st.caption("–ü—Ä–æ–≥–Ω–æ–∑ —Å–¥–µ–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –º–æ–¥–µ–ª–∏.")

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –î–µ—Ç–∞–ª–∏: {e}")
